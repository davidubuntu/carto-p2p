!function(n){var e={};function t(a){if(e[a])return e[a].exports;var r=e[a]={i:a,l:!1,exports:{}};return n[a].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=n,t.c=e,t.d=function(n,e,a){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:a})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var a=Object.create(null);if(t.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)t.d(a,r,function(e){return n[e]}.bind(null,r));return a},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=0)}([function(n,e,t){n.exports=t(1)},function(n,e,t){t(2)(t(3))},function(n,e){n.exports=function(n){function e(n){"undefined"!=typeof console&&(console.error||console.log)("[Script Loader]",n)}try{"undefined"!=typeof execScript&&"undefined"!=typeof attachEvent&&"undefined"==typeof addEventListener?execScript(n):"undefined"!=typeof eval?eval.call(null,n):e("EvalError: No eval function available")}catch(n){e(n)}}},function(n,e){n.exports="const map = L.map('map', {\n  zoomControl: false,\n}).setView([40.4, -3.68], 12);\n\nL.control.zoom({\n  position: 'topright',\n}).addTo(map);\n\nL.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/light_all/{z}/{x}/{y}.png', {\n  maxZoom: 18,\n}).addTo(map);\n\nconst client = new carto.Client({\n  apiKey: 'j3OxoSBlrLexYxaueyY9hg',\n  username: 'frontend',\n});\n\nconst madridListings = new carto.source.Dataset('madrid_listings');\n\n// Define basic styling options with CartoCSS\nconst style = new carto.style.CartoCSS(\n  ` #layer {\n           marker-fill: ramp([neighbourhood_group], (#5F4690,#1D6996,#38A6A5,#0F8554,#73AF48,#EDAD08,#E17C05,#CC503E,#94346E,#6F4070,#994E95,#EDAD08,#73AF48,#e7d4e8,#7F3C8D,#11A579,#3969AC,#F2B701,#0F8554,#1D6996,#6F4070,#E73F74), (\"Centro\", \"Chamberí\", \"Salamanca\", \"Arganzuela\", \"Retiro\", \"Tetuán\", \"Moncloa - Aravaca\", \"Chamartín\", \"Ciudad Lineal\", \"Latina\",\"Carabanchel\",\"Puente de Vallecas\",\"Villa de Vallecas\",\"Hortaleza\",\"Usera\",\"Fuencarral - El Pardo\",\"San Blas - Canillejas\",\"Moratalaz\",\"Villaverde\",\"Barajas\",\"Vicálvaro\",\"Other\"), \"=\");\n           marker-width: 7;\n           marker-line-width: 0;\n           marker-line-color: #FFFFFF; \n  }\n    `,\n);\n\n// Defining the madridApartments layer\nconst madridApartments = new carto.layer.Layer(madridListings, style);\n\n// Adding a layer to the client\nclient.addLayer(madridApartments)\n  .then(() => {\n    console.log('Layer added');\n  })\n  .catch((cartoError) => {\n    console.log('Layer not added');\n    console.error(cartoError.message);\n  });\n\nclient.getLeafletLayer().addTo(map);\n\n// Adding  madridListing Dataset and take neighbourhood group column from the table\nconst madridListingsDataView = new carto.dataview.Category(madridListings, 'neighbourhood_group', {\n  limit: 18,\n});\n\n// Listening to data changes on the dataview\nmadridListingsDataView.on('dataChanged', (newData) => {\n  console.log(newData);\n  refreshMadridListingsWidget(newData.categories);\n});\n\n\n// Define how the Widget updates with changes in  madridListingsDataView\nconst refreshMadridListingsWidget = (data) => {\n  const updatedP2pData = data.map(neighbourhood => [neighbourhood.name, neighbourhood.value]).sort((a, b) => b[1] - a[1]);\n  refreshChart(updatedP2pData);\n};\n\n\n// Instance of widget Chart\nconst p2pchart = new Highcharts.chart('p2pchart', {\n  chart: {\n    type: 'bar',\n  },\n  title: {\n    text: null,\n  },\n  xAxis: {\n    type: 'category',\n    title: {\n      text: 'Neighbourhood',\n    },\n  },\n  yAxis: {\n    min: 0,\n    title: {\n      text: 'Number of P2P apartaments',\n    },\n    labels: {\n      overflow: 'justify',\n    },\n  },\n  tooltip: {\n    enabled: false,\n    valueSuffix: 'number',\n  },\n  plotOptions: {\n    bar: {\n      borderRadius: 2,\n      dataLabels: {\n        enabled: true,\n      },\n    },\n    series: {\n      //   colorByPoint: true,\n    },\n  },\n  credits: {\n    enabled: false,\n  },\n  legend: {\n    enabled: false,\n  },\n  series: [{\n    name: 'P2P apartments',\n    data: null,\n    cursor: 'pointer',\n    point: {\n      events: {\n        click() {\n          filterNeighbourhood(madridListings, this.name);\n        },\n      },\n    },\n  }],\n  exporting: {\n    enabled: true,\n  },\n});\n\n\n// Draw widget  updates with changes in  madridListingsDataView\nconst refreshChart = (neighbourhood) => {\n  const colors = {\n    Centro: '#5F4690',\n    Chamberí: '#1D6996',\n    Salamanca: '#38A6A5',\n    Arganzuela: '#0F8554',\n    Retiro: '#73AF48',\n    Tetuán: '#EDAD08',\n    Moncloa: '#E17C05',\n    Chamartín: '#CC503E',\n    Lineal: '#94346E',\n    Latina: '#6F4070',\n    Carabanchel: '#994E95',\n    Puente: '#EDAD08',\n    Villa: '#73AF48',\n    Hortaleza: '#e7d4e8',\n    Usera: '#7F3C8D',\n    Fuencarral: '#11A579',\n    Canillejas: '#3969AC',\n    Moratalaz: '#F2B701',\n    Villaverde: '#0F8554',\n    Barajas: '#1D6996',\n    Vicálvaro: '#6F4070',\n    Other: '#E73F74',\n  };\n  const arr = [];\n  const neighbourhoodColors = neighbourhood.map((n, i) => {\n    Object.keys(colors).forEach((key) => {\n      if (n[0].includes(key)) {\n        arr.push({ name: n[0], y: n[1], color: colors[key] });\n      }\n    });\n    return arr[i];\n  });\n  p2pchart.series[0].setData(neighbourhoodColors, true);\n};\n\n\n// Filter data selected from the widget\nlet SelectedFilter; // Save selected filter to be accesible and reset from resetLayerData\nfilterNeighbourhood = (dataView, neighbourhoodToFilter) => {\n  SelectedFilter = new carto.filter.Category('neighbourhood_group', {\n    eq: neighbourhoodToFilter,\n  });\n  dataView.addFilter(SelectedFilter);\n};\n\n// Reset previous Filter when clicking button\nconst resetLayerData = (dataView, filter) => {\n  dataView.removeFilter(filter);\n};\n\n// Handle event listener when clicking reset button\ndocument.getElementById('reset-layer').addEventListener('click', () => resetLayerData(madridListings, SelectedFilter));\n\n\n// 5 Adding the bounding box filter and Defining the bounding box filter for the map\nconst boundingFilter = new carto.filter.BoundingBoxLeaflet(map);\nmadridListingsDataView.addFilter(boundingFilter);\n\n// Addd dataview to the client\nclient.addDataview(madridListingsDataView)\n  .then(() => {\n    console.log('Dataview added');\n  })\n  .catch((cartoError) => {\n    console.error(cartoError.message);\n  });\n"}]);